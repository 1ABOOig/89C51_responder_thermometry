#include<reg52.h>
#include<intrins.h>

#define uchar unsigned char
#define uint unsigned int
#define output P1
#define input P1

//code uchar seven_seg[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
code uchar ten_seg[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
code uchar ten_bit[]={0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};
code uchar smgduan[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

sbit run_key=P3^2;//启动按键
sbit rst_key=P3^3;//复位
sbit add_key=P3^6;//加
sbit dec_key=P3^7;//减
 sbit DSPORT=P3^4; 

sbit buzzer=P3^5;//报警

uchar num,temp;

uint player_num;//选手号码
uchar now_time=25;//默认倒计时时间
uchar next_time;
bit run_flag=0;//主持人按下开始标志位
bit time_off=0;//倒计时时间到或者开始有人抢答成功标志
uint Count_A=0;//定时器计数参数
uint Count_B=0;//定时器计数参数
uchar DisplayData[8];

void delay(uint ms)//延时函数
{
  uint i,j;
  for(i=ms;i>0;i--)
  	for(j=110;j>0;j--);
}
void keyScan1()//按键子程序
{
  if(run_key==0)//如果启动按键按下
	{
	    delay(5);//消抖
		if(run_key==0)
		{
		run_flag=1;//设置模式调整
		player_num=0;	  
		buzzer=0;//0.5s声音
	
		TR0=1;//开启定时器
		TR1=1; 
		
	  }				  
 	 while(run_key==0);//等待按键放开
	}
  if(rst_key==0)	//复位按键按下
 	{
  		delay(5);
  		if(rst_key==0)
	  {
	    run_flag=0;	//不抢答
		TR0=0; //停止计时器
		TR1=0;
		Count_A=0;// 复为所有参数
		Count_B=0;
		player_num=0;
		//num=0;
		time_off=0;
		now_time=next_time;//把设计的倒计时时间给他
		buzzer=1;//取消报警
	  }
  		while(rst_key==0);
  	}
	if((run_flag==0)&&(time_off==0))//只有没有开始抢答的时候可以加减
		{
  		if(add_key==0)
  			{
		  		delay(5);
			if(add_key==0)
			{
			  next_time++;//时间加上去
			  now_time++;
			}
			while(add_key==0);
		  	}
		if(dec_key==0)
		  	{
		    	delay(5);
				if(dec_key==0)
				{
			    next_time--; //时间减下来
				now_time--;
			  	}	  
		  	while(dec_key==0);
		  	}
 		}
  

}


//选手按键返回函数
uint key_input(void)
{
 uchar temp1,temp2;   //临时保存读取的行或者列
 uchar num=0 ;       //返回按键的值
 output = 0x0f;  
    temp1 = input;    //先读取行
 if(0x0f != temp1)     //按键按下
 {        
  delay(5);   //延时，消除抖动
  temp1 = input;   //再次读取行
  if(0x0f != temp1)  //说明按键确实按下 
  {
   temp1 = temp1 & 0x0f; //保留低4位
   output = 0xf0;   //准备读取列
   delay(1);   //延时一下，防止下一句读不到
   temp2 = input;   //直接读取列
   temp2 = temp2 & 0xf0; //保留高4位
   temp1 = temp1 | temp2; //将temp1和temp2的值合并
  }
 }
 switch(temp1)
 {
  		case 0xee:num=1;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;  
        case 0xde:num=2;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;  
        case 0xbe:num=3;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;   
        case 0x7e:num=4;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break; 
  		case 0xed:num=5;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;               
        case 0xdd:num=6;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;           
        case 0xbd:num=7;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;             
        case 0x7d:num=8;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;
		  
  		case 0xeb:num=9;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;    
        case 0xdb:num=10;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;    
        case 0xbb:num=11;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;   
        case 0x7b:num=12;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;    
  		case 0xe7:num=13;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;   
        case 0xd7:num=14;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;   
        case 0xb7:num=15;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break;    
        case 0x77:num=16;run_flag=0;time_off=1;TR0=0;TR1=0;buzzer=0;delay(500);break; 
		case 0xff:num=0;break;     
  		default:num=0;break;
 }
 	  
 
 return num;
}


 //初始化
 uchar Ds18b20Init() 
 { uchar i; DSPORT = 0; //将总线拉低 480us~960us
  i = 70; while(i--);//延时 642us
   DSPORT = 1; //然后拉高总线，如果 DS18B20 做出反应会将在 15us~60us 后总线拉低 i = 0;
    while(DSPORT) //等待 DS18B20 拉低总线
     { delay(1); i++; if(i>5)//等待>5MS 
     { return 0;//初始化失败
      } }
     return 1;//初始化成功
      }      
//写入字节  
 void Ds18b20WriteByte(uchar dat) 
 {
   uint i, j; for(j=0; j<8; j++) 
   { DSPORT = 0; //每写入一位数据之前先把总线拉低 1us
     i++; DSPORT = dat & 0x01; //然后写入一个数据，从最低位开始
     i=6; while(i--); //延时 68us，持续时间最少 60us
     DSPORT = 1; //然后释放总线，至少 1us 给总线恢复时间才能接 着写入第二个数值
     dat >>= 1; 
	 } 
}    
//读取字节     
uchar Ds18b20ReadByte() 
{ uchar byte, bi; uint i, j; 
	for(j=8; j>0; j--) 
	{ DSPORT = 0;//先将总线拉低 1us 
      i++; DSPORT = 1;//然后释放总线
      i++; i++;//延时 6us 等待数据稳定 
      bi = DSPORT; //读取数据，从最低位开始读取 /*将 byte 左移一位，然后与上右移 7 位后的 bi，注意移动之后移掉 那位补 0。*/
      byte = (byte >> 1) | (bi << 7); i = 4; //读取完之后等待 48us 再接着读取下一个数 
      while(i--); 
	  }return byte; 
}   
//让 DS18b20 开始转换温度
void Ds18b20ChangTemp() 
{     
 	  Ds18b20Init(); delay(1); 
	  Ds18b20WriteByte(0xcc); //跳过 ROM 操作命令 
	  Ds18b20WriteByte(0x44); //温度转换命令 //
	  delay(1); //等待转换成功，而如果你是一直刷着的话，就不 用这个延时了
} 
// 发送读取温度命令函数                                                   
void Ds18b20ReadTempCom() 
{ 
	  Ds18b20Init(); delay(1); 
	  Ds18b20WriteByte(0xcc); //跳过 ROM 操作命令 
	  Ds18b20WriteByte(0xbe); //发送读取温度命令
}
//读取温度
uint Ds18b20ReadTemp() 
{
      int temp = 0; 
      uchar tmh, tml; Ds18b20ChangTemp(); //先写入转换命令 
      Ds18b20ReadTempCom(); //然后等待转换完后发送读取温度 命令
      tml = Ds18b20ReadByte(); //读取温度值共 16 位，先读低字节
      tmh = Ds18b20ReadByte(); //再读高字节 
      temp = tmh; temp <<= 8; temp |= tml; return temp; 
}
//温度读取处理转换函数
void datapros(int temp) 
{ float tp; if(temp< 0) //当温度值为负数
 { DisplayData[0] = 0x40; // - //因为读取的温度是实际温度的补码，所以减 1，再取反求出原码 
 temp=temp-1; temp=~temp; tp=temp; temp=tp*0.0625*100+0.5;
 }
 else { DisplayData[0] = 0x00; 
 tp=temp;
 temp=tp*0.0625*100+0.5;
 }DisplayData[1] = smgduan[temp/ 1000]; DisplayData[2] = smgduan[temp % 1000 / 100]|0x80;DisplayData[3] = smgduan[temp % 100 / 10]; 
 }
//显示子程序
     
 void DigDisplay(uint a,uint b) 
 {	  P0=0x00;//消抖
	  P2=ten_bit[0];
   	  P0=ten_seg[a/10];//显示选手号
	  delay(2);
	  P2=0xff;
	  P0=0x00;//消抖
	  P2=ten_bit[1];
	  P0=ten_seg[a%10];
	  delay(2);
	  P2=0xff;
	
	  P0=0x00;//消抖
	  P2=ten_bit[2];
	  P0=ten_seg[b/10];//显示倒计时时间
	  delay(2);
	  P2=0xff;
	  P0=0x00;//消抖
	  P2=ten_bit[3];
	  P0=ten_seg[b%10];
	  delay(2);
	  P2=0xff;
	  P0=0x00;//消抖
	  P2=ten_bit[4];
	  P0=0x40;//显示横杠
	  delay(2);
	  P2=0xff;

	 P0=0x00;//消抖
     P2=ten_bit[5];
     P0=DisplayData[1];//发送数据
     delay(2); //间隔一段时间扫描
	 P2=0xff; 
     
	 P0=0x00;//消抖
	 P2=ten_bit[6];
     P0=DisplayData[2];//发送数据
     delay(2); //间隔一段时间扫描
	 P2=0xff; 

	 P0=0x00;//消抖
	 P2=ten_bit[7];
     P0=DisplayData[3];//发送数据
     delay(2); //间隔一段时间扫描
	 P2=0xff; 
	 
      }
 void EX_Init()
 {
   /*初始化定时器 /外部中断*/
   TMOD=0x11;
   TH0=0x0D8;
   TL0=0x0F0;
   TH1=0x0D8;
   TL1=0x0F0;
   IE=0x8b;//IE=0x85;
   IT0=1;
   IT1=1;
   EX0=1;
   TR0=0;//	关闭定时器
   TR1=0;
 }

 void main(void)
 {
   EX_Init();//初始化
   buzzer=1;
   P2=0xff;
   P1=0xff;
   P0=0xff;
   next_time=now_time;
   while(1)//死循环
   {
     keyScan1();//按键程序 
	 datapros(Ds18b20ReadTemp()); //数据处理函数
	 DigDisplay(player_num,now_time);//数码管显示函数 
   }
 }

 void Time0() interrupt 1
 {
   TH0=0xD8;//10ms
   TL0=0xF0;
  
   if(run_flag==1)//如果开始抢答
		{
		 player_num=key_input(); 
		 }
   	
 }
void Time1() interrupt 3
 {
   TH1=0xD8;
   TL1=0xF0;//10ms
   Count_A++;
   Count_B++;
   if(Count_B<50)//500ms的蜂鸣器提示
   buzzer=0;
   
   else buzzer=1;
   if(Count_A==100)//每秒钟减一，倒计时
   {
     Count_A=0;
	 now_time--; //当前倒计时时间
	 if(now_time<=0)//倒计时结束到0，开始报警，其他复位
	 { 
	   now_time=0;run_flag=0;TH0=0;TR1=0;time_off=1;buzzer=0;
	 }

   }
 }

